local gears = require("gears")
local awful = require("awful")

local hotkeys_popup = require("awful.hotkeys_popup")

local modkey = RC.vars.modkey
local terminal = RC.vars.terminal

local _M = {}

function _M.get()
	local globalkeys = gears.table.join(
		awful.key({}, "XF86AudioLowerVolume", function()
			awful.util.spawn("amixer -q -D pulse sset Master 5%-", false)
		end),
		awful.key({}, "XF86AudioRaiseVolume", function()
			awful.util.spawn("amixer -q -D pulse sset Master 5%+", false)
		end),
		awful.key({}, "XF86AudioMute", function()
			awful.util.spawn("amixer -D pulse set Master 1+ toggle", false)
		end),
		-- Media Keys
		awful.key({}, "XF86AudioPlay", function()
			awful.util.spawn("playerctl play-pause", false)
		end),
		awful.key({}, "XF86AudioNext", function()
			awful.util.spawn("playerctl next", false)
		end),
		awful.key({}, "XF86AudioPrev", function()
			awful.util.spawn("playerctl previous", false)
		end),
		awful.key({ modkey, }, "s", hotkeys_popup.show_help,
			{ description = "show help", group = "awesome" }),
		awful.key({ modkey, }, "k",
			function()
				awful.client.focus.byidx(1)
			end,
			{ description = "focus next by index", group = "client" }
		),
		awful.key({ modkey, }, "l",
			function()
				awful.client.focus.byidx(-1)
			end,
			{ description = "focus previous by index", group = "client" }
		),
		awful.key({ modkey, "Shift" }, "k", function() awful.client.swap.byidx(1) end,
			{ description = "swap with next client by index", group = "client" }),
		awful.key({ modkey, "Shift" }, "l", function() awful.client.swap.byidx(-1) end,
			{ description = "swap with previous client by index", group = "client" }),
		awful.key({ modkey, "Control" }, "k", function() awful.screen.focus_relative(1) end,
			{ description = "focus the next screen", group = "screen" }),
		awful.key({ modkey, "Control" }, "l", function() awful.screen.focus_relative(-1) end,
			{ description = "focus the previous screen", group = "screen" }),
		awful.key({ modkey, }, "Return", function() awful.spawn(terminal) end,
			{ description = "open a terminal", group = "launcher" }),
		awful.key({ modkey, "Control" }, "r", awesome.restart,
			{ description = "reload awesome", group = "awesome" }),
		awful.key({ modkey, "Shift" }, "e", awesome.quit,
			{ description = "quit awesome", group = "awesome" }),
		awful.key({ modkey, }, ";", function() awful.tag.incmwfact(0.05) end,
			{ description = "increase master width factor", group = "layout" }),
		awful.key({ modkey, }, "j", function() awful.tag.incmwfact(-0.05) end,
			{ description = "decrease master width factor", group = "layout" }),
		awful.key({ modkey, "Shift" }, ";", function() awful.tag.incnmaster(1, nil, true) end,
			{ description = "increase the number of master clients", group = "layout" }),
		awful.key({ modkey, "Shift" }, "j", function() awful.tag.incnmaster(-1, nil, true) end,
			{ description = "decrease the number of master clients", group = "layout" }),
		awful.key({ modkey, "Control" }, ";", function() awful.tag.incncol(1, nil, true) end,
			{ description = "increase the number of columns", group = "layout" }),
		awful.key({ modkey, "Control" }, "j", function() awful.tag.incncol(-1, nil, true) end,
			{ description = "decrease the number of columns", group = "layout" }),
		awful.key({ modkey, }, "space", function() awful.layout.inc(1) end,
			{ description = "select next", group = "layout" }),
		awful.key({ modkey, "Shift" }, "space", function() awful.layout.inc(-1) end,
			{ description = "select previous", group = "layout" }),

		-- Prompt
		awful.key({ modkey }, "r", function() awful.screen.focused().mypromptbox:run() end,
			{ description = "run prompt", group = "launcher" }),

		awful.key({ modkey }, "x",
			function()
				awful.prompt.run {
					prompt       = "Run Lua code: ",
					textbox      = awful.screen.focused().mypromptbox.widget,
					exe_callback = awful.util.eval,
					history_path = awful.util.get_cache_dir() .. "/history_eval"
				}
			end,
			{ description = "lua execute prompt", group = "awesome" })
	)

	return globalkeys
end

return setmetatable({}, { __call = function(_, ...) return _M.get(...) end })
